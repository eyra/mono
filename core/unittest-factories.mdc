# System Factory Guidelines

## Factory Organization

1. Each system should have its own factory module in `test/systems/[system]/factory.ex`
2. Use ExMachina.Ecto as the factory framework:
   ```elixir
   defmodule Systems.YourSystem.Factory do
     use ExMachina.Ecto, repo: Core.Repo

     alias Systems.YourSystem
   end
   ```

## Factory Method Naming

1. Basic factory methods should follow ExMachina naming convention:
   ```elixir
   def model_name_factory do
     %ModelName{
       field: "value"
     }
   end
   ```

2. Complex helper functions should be descriptively named and have default parameters:
   ```elixir
   def create_complete_structure(count \\ 3) do
     # Creation logic
   end
   ```

## Factory Implementation Rules

1. Use sequences for unique values:
   ```elixir
   def model_factory do
     %Model{
       identifier: sequence(:identifier, &"test-#{&1}"),
       order: sequence(:order, & &1)
     }
   end
   ```

2. Handle associations directly in the factory params:
   ```elixir
   # CORRECT
   insert(:model, %{parent: parent_record})

   # For multiple associations
   insert_list(3, :model, %{parent: parent_record})
   ```

3. Create helper functions for complex scenarios:
   ```elixir
   def create_structure_with_children(child_count \\ 3) do
     parent = insert(:parent)
     children = insert_list(child_count, :child, %{parent: parent})
     %{parent | children: children}
   end
   ```

4. Preload associations when returning complex structures:
   ```elixir
   def create_complete_structure(params \\ []) do
     structure = create_base_structure(params)
     Repo.preload(structure, [:associations])
   end
   ```

## Best Practices

1. Keep basic factories simple with only required fields
2. Use helper functions for complex scenarios
3. Provide meaningful defaults that represent common use cases
4. Allow overriding of attributes via parameters
5. Document complex factory functions with @doc
6. Use sequences for unique values
7. Handle associations directly rather than through foreign keys
8. Return preloaded associations when creating complex structures

Example Implementation:
```elixir
defmodule Systems.YourSystem.Factory do
  use ExMachina.Ecto, repo: Core.Repo

  alias Systems.YourSystem
  alias Core.Repo

  def model_factory do
    %YourSystem.Model{
      title: sequence(:title, &"Title #{&1}"),
      status: "active"
    }
  end

  @doc """
  Creates a complete model with associated records.
  """
  def create_complete_model(child_count \\ 3) do
    model = insert(:model)
    children = insert_list(child_count, :child, %{parent: model})
    %{model | children: children} |> Repo.preload([:children])
  end
end